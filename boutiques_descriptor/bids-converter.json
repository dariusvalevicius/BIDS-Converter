{
    "name": "BIDS-Converter",
    "author": "Darius Valevicius",
    "description": "Converts arbitrary file collection containing one subject's data into BIDS format",
    "tool-version": "v0.1.0",
    "schema-version": "0.5",
    "command-line": "python /app/bids_converter.py [INPUT] [SUBJECT] [SESSIONS] [RUNS] [TASKS] [TASK_SUFFIXES] [ACQ] [ACQ_SUFFIXES] [ANAT] [T1W] [T2W] [FLAIR] [FUNC] [BOLD] [ASL] [PHYSIO] [DWI] [DWI_STRINGS] [NOCOMPRESS]",
    "container-image": {
        "image": "dvalev/bids-converter",
        "index": "docker://",
        "type": "docker"
    },
    "inputs": [
        {
            "command-line-flag": "--input",
            "id": "input",
            "name": "Input",
            "optional": false,
            "type": "File",
            "value-key": "[INPUT]",
            "description": "Input file collection containing all subject data."
        },
        {
            "command-line-flag": "--subject",
            "id": "subject",
            "name": "Subject number",
            "optional": true,
            "type": "String",
            "value-key": "[SUBJECT]",
            "description": "Subject number.\nIf not declared, will try to extract from input folder name."
        },
        {
            "command-line-flag": "--sessions",
            "id": "sessions",
            "name": "Session identifiers",
            "optional": true,
            "type": "String",
            "value-key": "[SESSIONS]",
            "description": "Strings indentifying sessions.\nSeparate multiple strings with commas (no spaces).\nIf different modalities identify sessions with different strings, add equivalent sets after a semicolon (;)."
        },
        {
            "command-line-flag": "--runs",
            "id": "runs",
            "name": "Run identifiers",
            "optional": true,
            "type": "String",
            "value-key": "[RUNS]",
            "description": "Strings indentifying runs."
        },
        {
            "command-line-flag": "--tasks",
            "id": "tasks",
            "name": "Task identifiers",
            "optional": true,
            "type": "String",
            "value-key": "[TASKS]",
            "description": "Strings indentifying tasks.\nSeparate multiple strings with commas (no spaces).\nIf different modalities identify sessions with different strings, add equivalent sets after a semicolon (;)."
        },
        {
            "command-line-flag": "--task_suffixes",
            "id": "task_suffixes",
            "name": "Desired task suffixes",
            "optional": true,
            "type": "String",
            "value-key": "[TASK_SUFFIXES]",
            "description": "Desired task suffixes. Order and quantity must match a single set as entered in 'Task Identifiers'."
        },
        {
            "command-line-flag": "--acq",
            "id": "acq",
            "name": "Acquisition identifiers",
            "optional": true,
            "type": "String",
            "value-key": "[ACQ]",
            "description": "Strings indentifying acquisitions.\nSeparate multiple strings with commas (no spaces).\nIf different modalities identify sessions with different strings, add equivalent sets after a semicolon (;)."
        },
        {
            "command-line-flag": "--acq_suffixes",
            "id": "acq_suffixes",
            "name": "Desired acquisition suffixes",
            "optional": true,
            "type": "String",
            "value-key": "[ACQ_SUFFIXES]",
            "description": "Desired acquisition suffixes. Order and quantity must match a single set as entered in 'Acquisition Identifiers'."
        },
        {
            "command-line-flag": "--anat",
            "id": "anat",
            "name": "Anatomical data",
            "optional": true,
            "type": "Flag",
            "value-key": "[ANAT]",
            "description": "Are anatomical data included?"
        },
        {
            "command-line-flag": "--t1w",
            "id": "t1w",
            "name": "T1w identifiers",
            "optional": true,
            "requires-inputs": [
                "anat"
            ],
            "type": "String",
            "value-key": "[T1W]",
            "description": "String indentifying T1w images."
        },
        {
            "command-line-flag": "--t2w",
            "id": "t2w",
            "name": "T2w identifiers",
            "optional": true,
            "requires-inputs": [
                "anat"
            ],
            "type": "String",
            "value-key": "[T2W]",
            "description": "String identifying T2w images."
        },
        {
            "command-line-flag": "--flair",
            "id": "flair",
            "name": "FLAIR identifiers",
            "optional": true,
            "requires-inputs": [
                "anat"
            ],
            "type": "String",
            "value-key": "[FLAIR]",
            "description": "String identifying FLAIR images."
        },
        {
            "command-line-flag": "--func",
            "id": "func",
            "name": "Functional data",
            "optional": true,
            "type": "Flag",
            "value-key": "[FUNC]",
            "description": "Are functional data included?"
        },
        {
            "command-line-flag": "--bold",
            "id": "bold",
            "name": "BOLD data identifiers",
            "optional": true,
            "requires-inputs": [
                "func"
            ],
            "type": "String",
            "value-key": "[BOLD]",
            "description": "String identifying BOLD images."
        },
        {
            "command-line-flag": "--physio",
            "id": "physio",
            "name": "Physiological recording identifiers",
            "optional": true,
            "requires-inputs": [
                "func"
            ],
            "type": "String",
            "value-key": "[PHYSIO]",
            "description": "String identifying physiological recordings."
        },
        {
            "command-line-flag": "--asl",
            "id": "asl",
            "name": "ASL data identifiers",
            "optional": true,
            "requires-inputs": [
                "func"
            ],
            "type": "String",
            "value-key": "[ASL]",
            "description": "String identifying ASL images."
        },
        {
            "command-line-flag": "--dwi",
            "id": "dwi",
            "name": "DWI data",
            "optional": true,
            "type": "Flag",
            "value-key": "[DWI]",
            "description": "Are DWI images included?"
        },
        {
            "command-line-flag": "--dwi_strings",
            "id": "dwi_strings",
            "name": "DWI data identifiers",
            "optional": true,
            "requires-inputs": [
                "dwi"
            ],
            "type": "String",
            "value-key": "[DWI_STRINGS]",
            "description": "String identifying DWI images."
        },
        {
            "command-line-flag": "--nocompress",
            "id": "nocompress",
            "name": "Compression flag (for testing)",
            "optional": true,
            "type": "Flag",
            "value-key": "[NOCOMPRESS]",
            "description": "Check this to skip file compression. Useful for saving time during testing."
        }
    ],
    "groups": [
        {
            "id": "anat_group",
            "members": [
                "anat",
                "t1w",
                "t2w",
                "flair"
            ],
            "name": "Anatomical images"
        },
        {
            "id": "func_group",
            "members": [
                "func",
                "bold",
                "asl",
                "physio"
            ],
            "name": "Functional images"
        },
        {
            "id": "dwi_group",
            "members": [
                "dwi",
                "dwi_strings"
            ],
            "name": "DWI images"
        }
    ],
    "tags": {
        "domain": [
            "neuroinformatics",
            "BIDS",
            "neuroimaging"
        ]
    },
    "suggested-resources": {
        "cpu-cores": 1,
        "ram": 1,
        "walltime-estimate": 60
    },
    "error-codes": [
        {
            "code": 1,
            "description": "Crashed"
        }
    ],
    "custom": {
        "cbrain:readonly-input-files": true
    }
}